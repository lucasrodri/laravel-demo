openapi: 3.0.0
info:
  title: 'Swagger API documentation'
  contact:
    email: lucasrc.rodri@gmail.com
  version: 1.0.0
paths:
  /api/admins:
    get:
      tags:
        - Admins
      summary: 'Obtenha uma lista de administradores'
      operationId: c5acb38f8f959e6b8843a1f8542a8e52
      responses:
        '200':
          description: 'Retorna uma lista de administradores'
          content:
            application/json:
              schema:
                properties:
                  request_UUID: { type: string, example: UUID }
                  action: { type: string, example: SHOW }
                  content: { type: array, items: { type: object } }
                  status: { type: integer, example: 200 }
                type: object
    post:
      tags:
        - Admins
      summary: 'Criar um novo admin'
      description: 'Cria um novo admin com nome e texto.'
      operationId: b11ca0c9763f9d0066aa85b5b6c4affc
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                title:
                  type: string
                  example: João
                body:
                  type: string
                  example: 'Ciência da Computação'
              type: object
      responses:
        '201':
          description: 'Admin criado com sucesso'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Admin criado com sucesso' }
                  id: { type: integer, example: 1 }
                type: object
        '400':
          description: 'Erro na criação do admin'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Erro na criação do admin' }
                type: object
  '/api/admins/{id}':
    get:
      tags:
        - Admins
      summary: 'Obtém informações de um administrador'
      operationId: 72068a1a90a1dc5d340716fff4fa5b16
      parameters:
        -
          name: id
          in: path
          description: 'ID do administrador a ser consultado'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Informações do administrador'
          content:
            application/json:
              schema:
                properties:
                  request_UUID: { type: string, example: UUID }
                  action: { type: string, example: READ }
                  id: { type: integer, example: '1' }
                type: object
        '404':
          description: 'Admin não encontrado'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Admin não encontrado' }
                type: object
    put:
      tags:
        - Admins
      summary: 'Atualiza um administrador'
      operationId: ebf8114c493318f19cb82e775972c931
      parameters:
        -
          name: id
          in: path
          description: 'ID do administrador a ser atualizado'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: 'Dados do administrador para atualização'
        required: true
        content:
          application/json:
            schema:
              properties:
                title:
                  description: 'Nome do administrador'
                  type: string
                body:
                  description: 'Curso do administrador'
                  type: string
              type: object
      responses:
        '200':
          description: 'Admin atualizado com sucesso'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Registros atualizados com sucesso' }
                type: object
        '404':
          description: 'Admin não encontrado'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Admin não encontrado' }
                type: object
    delete:
      tags:
        - Admins
      summary: 'Deleta um administrador'
      operationId: b4d6c366c6f342da41b2c36384ca128f
      parameters:
        -
          name: id
          in: path
          description: 'ID do administrador a ser deletado'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '202':
          description: 'Administrador deletado com sucesso'
          content:
            application/json:
              schema:
                properties:
                  request_UUID: { type: string, example: UUID }
                  action: { type: string, example: DELETE }
                  id: { type: integer, example: '1' }
                type: object
        '404':
          description: 'Admin não encontrado'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Admin não encontrado' }
                type: object
  /api/students:
    get:
      operationId: e4f0d952747276208d5e417c601ee049
      responses:
        '200':
          description: 'Display a listing of the resource'
    post:
      summary: 'Criar um novo estudante'
      description: 'Cria um novo estudante com nome e curso.'
      operationId: 35ebbddb86720f9bffc06bb674a4568a
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  example: João
                course:
                  type: string
                  example: 'Ciência da Computação'
              type: object
      responses:
        '201':
          description: 'Estudante criado com sucesso'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Estudante criado com sucesso' }
                  id: { type: integer, example: 1 }
                type: object
        '400':
          description: 'Erro na criação do estudante'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Erro na criação do estudante' }
                type: object
  '/api/students/{id}':
    get:
      operationId: 5a976c9a8c3cbab8cb6e103ea06cb9f8
      responses:
        '200':
          description: 'Display a listing of the resource'
    put:
      operationId: 522fbb9e7a947ea1a6580121da4c602f
      responses:
        '200':
          description: 'Display a listing of the resource'
    delete:
      operationId: 2d220c8698b0ea5fc68d5d69656e058b
      responses:
        '202':
          description: 'Display a listing of the resource'
  /api/parceiros:
    get:
      tags:
        - Parceiros
      summary: 'Obtenha uma lista de parceiros'
      operationId: 331ccceb05a8d94d50f6ace8651627ac
      responses:
        '200':
          description: 'Retorna uma lista de parceiros'
          content:
            application/json:
              schema:
                properties:
                  request_UUID: { type: string, example: UUID }
                  action: { type: string, example: SHOW }
                  content: { type: array, items: { type: object } }
                  status: { type: integer, example: 200 }
                type: object
    post:
      tags:
        - Parceiros
      summary: 'Criar um novo parceiros'
      description: 'Cria um novo parceiros com nome e texto.'
      operationId: 2b8508c98227267e3b5be181391158cc
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                title:
                  type: string
                  example: João
                body:
                  type: string
                  example: 'Ciência da Computação'
              type: object
      responses:
        '201':
          description: 'Parceiros criado com sucesso'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Parceiros criado com sucesso' }
                  id: { type: integer, example: 1 }
                type: object
        '400':
          description: 'Erro na criação do parceiros'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Erro na criação do parceiros' }
                type: object
  '/api/parceiros/{id}':
    get:
      tags:
        - Parceiros
      summary: 'Obtém informações de um parceirosistrador'
      operationId: 39ba2611756d0b3a86c0d5c19874d624
      parameters:
        -
          name: id
          in: path
          description: 'ID do parceirosistrador a ser consultado'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Informações do parceirosistrador'
          content:
            application/json:
              schema:
                properties:
                  request_UUID: { type: string, example: UUID }
                  action: { type: string, example: READ }
                  id: { type: integer, example: '1' }
                type: object
        '404':
          description: 'Parceiros não encontrado'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Parceiros não encontrado' }
                type: object
    put:
      tags:
        - Parceiros
      summary: 'Atualiza um parceirosistrador'
      operationId: 239df03634a8e8e28124d2d5d6818b43
      parameters:
        -
          name: id
          in: path
          description: 'ID do parceirosistrador a ser atualizado'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: 'Dados do parceirosistrador para atualização'
        required: true
        content:
          application/json:
            schema:
              properties:
                title:
                  description: 'Nome do parceirosistrador'
                  type: string
                body:
                  description: 'Curso do parceirosistrador'
                  type: string
              type: object
      responses:
        '200':
          description: 'Parceiros atualizado com sucesso'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Registros atualizados com sucesso' }
                type: object
        '404':
          description: 'Parceiros não encontrado'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Parceiros não encontrado' }
                type: object
    delete:
      tags:
        - Parceiros
      summary: 'Deleta um parceirosistrador'
      operationId: a95f173d7df2c28f3bf644fedc3308ae
      parameters:
        -
          name: id
          in: path
          description: 'ID do parceirosistrador a ser deletado'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '202':
          description: 'Parceirosistrador deletado com sucesso'
          content:
            application/json:
              schema:
                properties:
                  request_UUID: { type: string, example: UUID }
                  action: { type: string, example: DELETE }
                  id: { type: integer, example: '1' }
                type: object
        '404':
          description: 'Parceiros não encontrado'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Parceiros não encontrado' }
                type: object
  /api/trabs:
    get:
      tags:
        - Trabs
      summary: 'Obtenha uma lista de trabalhadores'
      operationId: 6f21555f7a623041b507bf302d28359c
      responses:
        '200':
          description: 'Retorna uma lista de trabalhadores'
          content:
            application/json:
              schema:
                properties:
                  request_UUID: { type: string, example: UUID }
                  action: { type: string, example: SHOW }
                  content: { type: array, items: { type: object } }
                  status: { type: integer, example: 200 }
                type: object
    post:
      tags:
        - Trabs
      summary: 'Criar um novo trab'
      description: 'Cria um novo trab com nome e texto.'
      operationId: 6eff0ee6fde1be40567ccf647d6b811a
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                title:
                  type: string
                  example: João
                body:
                  type: string
                  example: 'Ciência da Computação'
              type: object
      responses:
        '201':
          description: 'Trab criado com sucesso'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Trab criado com sucesso' }
                  id: { type: integer, example: 1 }
                type: object
        '400':
          description: 'Erro na criação do trab'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Erro na criação do trab' }
                type: object
  '/api/trabs/{id}':
    get:
      tags:
        - Trabs
      summary: 'Obtém informações de um trabistrador'
      operationId: 793cee4dda5139e21921178d9d77ef67
      parameters:
        -
          name: id
          in: path
          description: 'ID do trabistrador a ser consultado'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Informações do trabistrador'
          content:
            application/json:
              schema:
                properties:
                  request_UUID: { type: string, example: UUID }
                  action: { type: string, example: READ }
                  id: { type: integer, example: '1' }
                type: object
        '404':
          description: 'Trab não encontrado'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Trab não encontrado' }
                type: object
    put:
      tags:
        - Trabs
      summary: 'Atualiza um trabistrador'
      operationId: 1809349c80d766cdd8a520da60eab19e
      parameters:
        -
          name: id
          in: path
          description: 'ID do trabistrador a ser atualizado'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: 'Dados do trabistrador para atualização'
        required: true
        content:
          application/json:
            schema:
              properties:
                title:
                  description: 'Nome do trabistrador'
                  type: string
                body:
                  description: 'Curso do trabistrador'
                  type: string
              type: object
      responses:
        '200':
          description: 'Trab atualizado com sucesso'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Registros atualizados com sucesso' }
                type: object
        '404':
          description: 'Trab não encontrado'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Trab não encontrado' }
                type: object
    delete:
      tags:
        - Trabs
      summary: 'Deleta um trabistrador'
      operationId: 6aca6321f6e2fd81fc4950f35310372a
      parameters:
        -
          name: id
          in: path
          description: 'ID do trabistrador a ser deletado'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '202':
          description: 'Trabistrador deletado com sucesso'
          content:
            application/json:
              schema:
                properties:
                  request_UUID: { type: string, example: UUID }
                  action: { type: string, example: DELETE }
                  id: { type: integer, example: '1' }
                type: object
        '404':
          description: 'Trab não encontrado'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Trab não encontrado' }
                type: object
